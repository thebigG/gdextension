# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

name: godot
description: "Run Godot integration tests"

inputs:
  artifact-name:
    required: true
    description: "Name of the compiled Godot artifact to download"

  binary-filename:
    required: true
    description: "Filename of the Godot executable"

  rust-toolchain:
    required: false
    default: 'stable'
    description: "Rust toolchain specifier (e.g. 'nightly')"

  rust-extra-args:
    required: false
    default: ''
    description: "Extra command line arguments for 'cargo build', e.g. features"


runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    # Replaces also backspaces on Windows, since they cause problems in Bash
    - name: "Store variable to Godot binary"
      run: |
        runnerDir=$(echo "${{ runner.temp }}" | sed "s!\\\\!/!")
        echo "RUNNER_DIR=$runnerDir" >> $GITHUB_ENV
        echo "GODOT4_BIN=$runnerDir/godot_bin/${{ inputs.binary-filename }}" >> $GITHUB_ENV
      shell: bash

#    - name: "Check cache for installed Godot version"
#      id: "cache-godot"
#      uses: actions/cache@v3
#      with:
#        path: ${{ runner.temp }}/godot_bin
#        key: ${{ inputs.artifact-name }}-v${{ inputs.godot-ver }}

    - name: "Download Godot artifact"
#      if: steps.cache-godot.outputs.cache-hit != 'true'
      run: |
        curl https://nightly.link/Bromeon/godot4-nightly/workflows/compile-godot/master/${{ inputs.artifact-name }}.zip -Lo artifact.zip
        unzip artifact.zip -d $RUNNER_DIR/godot_bin
      shell: bash

    # The chmod seems still necessary, although applied before uploading artifact. Possibly modes are not preserved.
    # The `| xargs` pattern trims the output, since printed version may contain extra newline, which causes problems in env vars.
    - name: "Inspect Godot version"
      run: |
        chmod +x $GODOT4_BIN
        godotVer=$($GODOT4_BIN --version | xargs || true)
        gitSha=$(echo $godotVer | sed -E "s/.+custom_build\.//")
        echo "GODOT_BUILT_FROM=_Built from [\`$godotVer\`](https://github.com/godotengine/godot/commit/$gitSha)._" >> $GITHUB_ENV
      shell: bash

    # Note: if this fails, run `git diff -R > tweaks.patch` after updating the file manually
    - name: "Copy and compare GDExtension header"
      if: inputs.artifact-name == 'godot-linux'
      run: |
        mkdir -p godot-codegen/input
        cp $RUNNER_DIR/godot_bin/gdextension_interface.h godot-codegen/input/gdextension_interface.h
        git apply godot-codegen/input/tweak.patch -v
        git diff --exit-code --quiet || {
            echo "OUTCOME=header-diff" >> $GITHUB_ENV
            echo "gdextension_interface.h is not up-to-date; abort."
            echo ""
            
            echo "### :x: Outdated GDExtension API header" >> $GITHUB_STEP_SUMMARY
            echo "gdextension_interface.h contains the following differences:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
            git diff >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "After manually updating file, run:   \`git diff -R > tweak.patch\`." >> $GITHUB_STEP_SUMMARY

        	exit 1
        }
      shell: bash

    - name: "Install Rust"
      uses: ./.github/composite/rust
      with:
        rust: ${{ inputs.rust-toolchain }}

    - name: "Install LLVM"
      uses: ./.github/composite/llvm
      # TODO only run it on systems needed

    - name: "Build godot-rust"
      run: |
        cargo build -p itest ${{ inputs.rust-extra-args }}
      shell: bash

    - name: "Run Godot integration tests"
      # Aborts immediately if Godot outputs certain keywords (would otherwise stall until CI runner times out).
      # Explanation:
      # * tee:      still output logs while scanning for errors
      # * grep -q:  no output, use exit code 0 if found -> thus also &&
      # * pkill:    stop Godot execution (since it hangs in headless mode); simple 'head -1' did not work as expected
      # * exit:     the terminated process would return 143, but this is more explicit and future-proof
      run: |
        cd itest/godot
        echo "OUTCOME=itest" >> $GITHUB_ENV
        $GODOT4_BIN --headless 2>&1 | tee "${{ runner.temp }}/log.txt" | tee >(grep "SCRIPT ERROR:" -q && {
        	printf "\n -- Godot engine encountered error, abort...\n";
        	pkill godot
            echo "OUTCOME=godot-runtime" >> $GITHUB_ENV
        	exit 2
        })
        
        echo "OUTCOME=success" >> $GITHUB_ENV
      shell: bash

    - name: "Check for memory leaks"
      run: |
        if grep -q "ObjectDB instances leaked at exit" "${{ runner.temp }}/log.txt"; then
          echo "OUTCOME=godot-leak" >> $GITHUB_ENV
          exit 2
        fi
      shell: bash

    - name: "Conclusion"
      if: always()
      run: |
        echo "Evaluate conclusion ($OUTCOME)"
        
        case $OUTCOME in
          "success")
            echo "### :heavy_check_mark: Godot integration tests passed" > $GITHUB_STEP_SUMMARY
            echo "$GODOT_BUILT_FROM" >> $GITHUB_STEP_SUMMARY
            ;;
        
          "godot-runtime")
            echo "### :x: Godot runtime error" > $GITHUB_STEP_SUMMARY
            echo "$GODOT_BUILT_FROM" >> $GITHUB_STEP_SUMMARY
        	echo "Aborted due to an error during Godot execution." >> $GITHUB_STEP_SUMMARY
            exit 2
            ;;
        
          "godot-leak")
            echo "### :x: Memory leak" > $GITHUB_STEP_SUMMARY
            echo "$GODOT_BUILT_FROM" >> $GITHUB_STEP_SUMMARY
        	echo "Integration tests cause memory leaks." >> $GITHUB_STEP_SUMMARY
            exit 3
            ;;
        
          "itest")
            echo "### :x: Godot integration tests failed" > $GITHUB_STEP_SUMMARY
            echo "$GODOT_BUILT_FROM" >> $GITHUB_STEP_SUMMARY
            exit 4
            ;;
        
          "header-diff")
            # already written
            ;;

          *)
            echo "### :x: Unknown error occurred" > $GITHUB_STEP_SUMMARY
            echo "$GODOT_BUILT_FROM" >> $GITHUB_STEP_SUMMARY
            exit 5
            ;;
        esac
      shell: bash
